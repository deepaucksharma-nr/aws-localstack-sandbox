integrations:
{% for db in mysql_databases %}
{% if db.enabled | default(true) %}
  - name: nri-mysql
    env:
      # Connection settings based on provider
{% if db.provider == 'rds' or db.provider == 'aurora' %}
      HOSTNAME: {{ db.connection.endpoint | default(db.connection.cluster_endpoint) }}
{% else %}
      HOSTNAME: {{ db.connection.host | default(db.host) }}
{% endif %}
      PORT: {{ db.connection.port | default(db.port) | default(3306) }}
      
      # Credentials handling based on source
{% if db.credentials.password_source == 'aws_secrets_manager' %}
      # Password will be fetched from AWS Secrets Manager
      USERNAME: {{ db.credentials.username | default(db.user) }}
      PASSWORD: ${AWS_SECRET:{{ db.credentials.password_key }}}
{% elif db.credentials.password_source == 'aws_ssm_parameter' %}
      # Password will be fetched from AWS SSM Parameter Store
      USERNAME: {{ db.credentials.username | default(db.user) }}
      PASSWORD: ${AWS_SSM:{{ db.credentials.password_key }}}
{% elif db.credentials.password_source == 'env_var' %}
      # Password from environment variable
      USERNAME: {{ db.credentials.username | default(db.user) }}
      PASSWORD: ${{{ db.credentials.password_env }}}
{% else %}
      # Plain text password (use only for development)
      USERNAME: {{ db.credentials.username | default(db.user) }}
      PASSWORD: {{ db.credentials.password | default(db.password) }}
{% endif %}
      
{% if db.database is defined %}
      DATABASE: {{ db.database }}
{% endif %}
      REMOTE_MONITORING: true
      
      # Metrics collection
      METRICS: true
      
      # Extended metrics
      EXTENDED_METRICS: {{ db.monitoring.extended_metrics | default(db.extended_metrics) | default(true) | lower }}
      
      # Inventory collection
      INVENTORY: {{ db.monitoring.collect_inventory | default(true) | lower }}
      
      # TLS Configuration
{% if db.tls.enabled | default(db.tls_enabled) | default(false) %}
      ENABLE_TLS: true
{% if db.tls.ca_bundle_file is defined %}
      TLS_CA_BUNDLE: {{ db.tls.ca_bundle_file }}
{% elif db.provider == 'rds' or db.provider == 'aurora' %}
      # Default RDS CA bundle
      TLS_CA_BUNDLE: /opt/newrelic/certs/rds-ca-2019-root.pem
{% endif %}
{% if db.tls.verify_server_certificate is defined %}
      TLS_INSECURE_SKIP_VERIFY: {{ (not db.tls.verify_server_certificate) | lower }}
{% endif %}
{% endif %}
      
      # Custom queries file for query performance monitoring
{% if db.monitoring.custom_metrics_query is defined %}
      # Inline custom metrics query
      CUSTOM_METRICS_QUERY: |
        {{ db.monitoring.custom_metrics_query | indent(8) }}
{% elif db.monitoring.custom_metrics_query_file is defined %}
      CUSTOM_METRICS_QUERY_FILE: {{ db.monitoring.custom_metrics_query_file }}
{% else %}
      # Default query performance monitoring file
      CUSTOM_METRICS_QUERY_FILE: /etc/newrelic-infra/integrations.d/mysql-custom-queries.yml
{% endif %}
      
      # Query monitoring specific settings
{% if db.monitoring.enable_query_monitoring | default(db.enable_query_monitoring) | default(true) %}
      # Enable performance schema metrics collection
      PERFORMANCE_SCHEMA: true
      
      # Maximum number of normalized queries to collect
      MAX_SQL_QUERY_LENGTH: {{ db.monitoring.max_sql_query_length | default(db.max_sql_query_length) | default(1000) }}
      
      # Query collection interval (separate from main metrics)
      QUERY_METRICS_INTERVAL: {{ db.monitoring.query_metrics_interval | default(db.query_metrics_interval) | default('60s') }}
      
      # Collect query samples
      GATHER_QUERY_SAMPLES: {{ db.monitoring.gather_query_samples | default(db.gather_query_samples) | default(true) | lower }}
{% endif %}

      # Provider-specific settings
{% if db.provider == 'rds' %}
      # RDS-specific configuration
      METRICS_SOURCE: rds
{% if db.monitoring.collect_rds_metrics | default(true) %}
      COLLECT_RDS_METRICS: true
      CLOUDWATCH_NAMESPACE: {{ db.monitoring.cloudwatch_namespace | default('AWS/RDS') }}
{% endif %}
{% elif db.provider == 'aurora' %}
      # Aurora-specific configuration
      METRICS_SOURCE: aurora
{% if db.monitoring.collect_aurora_metrics | default(true) %}
      COLLECT_AURORA_METRICS: true
{% if db.monitoring.monitor_readers | default(false) and db.connection.reader_endpoint is defined %}
      READER_ENDPOINT: {{ db.connection.reader_endpoint }}
{% endif %}
{% endif %}
{% endif %}
    
    labels:
      env: {{ db.labels.environment | default(db.environment) | default(environment) | default('production') }}
      database_type: mysql
      provider: {{ db.provider | default('unknown') }}
      service_name: {{ db.name | default(db.service_name) | default('mysql-' + (db.connection.host | default(db.host))) }}
{% if db.labels is defined %}
{% for key, value in db.labels.items() if key not in ['environment'] %}
      {{ key }}: {{ value }}
{% endfor %}
{% endif %}
{% if db.custom_labels is defined %}
{% for key, value in db.custom_labels.items() %}
      {{ key }}: {{ value }}
{% endfor %}
{% endif %}
    
    interval: {{ db.monitoring.interval | default(db.interval) | default('30s') }}
    timeout: {{ db.monitoring.timeout | default('10s') }}
{% endif %}
{% endfor %}
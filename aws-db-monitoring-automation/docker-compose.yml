version: '3.8'

services:
  localstack:
    image: localstack/localstack:3.0.2
    ports:
      - "127.0.0.1:4566:4566"
    environment:
      - DEBUG=${DEBUG:-0}
      - SERVICES=ec2,iam,secretsmanager,ssm,cloudwatch,kms,rds,sts
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LOCALSTACK_API_KEY=${LOCALSTACK_API_KEY:-}
    volumes:
      - "./localstack:/docker-entrypoint-initaws.d"
      - "localstack_data:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"  # Read-only access
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    user: "${UID:-1000}:${GID:-1000}"

  mysql-test:
    image: mysql:8.0.35
    ports:
      - "127.0.0.1:3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: ${MYSQL_DATABASE:-testdb}
      MYSQL_USER: ${MYSQL_USER:-newrelic}
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
    volumes:
      - "./test/fixtures/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql:ro"
      - "mysql_data:/var/lib/mysql"
    networks:
      - monitoring
    secrets:
      - mysql_root_password
      - mysql_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/mysqld

  postgres-test:
    image: postgres:15.5
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-testdb}
      POSTGRES_USER: ${POSTGRES_USER:-newrelic}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - "./test/fixtures/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro"
      - "postgres_data:/var/lib/postgresql/data"
    networks:
      - monitoring
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-newrelic}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp
      - /run/postgresql

  newrelic-mock:
    build:
      context: ./mock-services
      dockerfile: Dockerfile.newrelic
    image: db-monitoring/newrelic-mock:latest
    ports:
      - "127.0.0.1:8081:8081"
    environment:
      - NODE_ENV=production
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    user: "node"
    read_only: true
    tmpfs:
      - /tmp

  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    image: db-monitoring/test-runner:latest
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - MYSQL_HOST=mysql-test
      - POSTGRES_HOST=postgres-test
      - NEWRELIC_MOCK_URL=http://newrelic-mock:8081
      - ANSIBLE_HOST_KEY_CHECKING=False
    depends_on:
      localstack:
        condition: service_healthy
      mysql-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
      newrelic-mock:
        condition: service_healthy
    networks:
      - monitoring
    volumes:
      - ".:/app:ro"
      - "./test/results:/app/test/results:rw"
    working_dir: /app
    command: ["./test/run-tests.sh"]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    user: "${UID:-1000}:${GID:-1000}"

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  localstack_data:
  mysql_data:
  postgres_data:

secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  mysql_password:
    file: ./secrets/mysql_password.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
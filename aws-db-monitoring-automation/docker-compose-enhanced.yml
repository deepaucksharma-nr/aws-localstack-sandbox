version: '3.8'

services:
  # LocalStack for AWS service simulation
  localstack:
    image: localstack/localstack:2.3
    container_name: localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=ec2,iam,s3,ssm,secretsmanager,sts,cloudwatch,logs
      - LOCALSTACK_DOCKER_HOST=unix:///var/run/docker.sock
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
      - AWS_DEFAULT_REGION=us-east-1
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./localstack:/etc/localstack/init/ready.d"
      - localstack_data:/tmp/localstack
    networks:
      - monitoring

  # Mock New Relic API
  newrelic-mock:
    build:
      context: ./mock-services
      dockerfile: Dockerfile.newrelic
    container_name: newrelic-mock
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL database (container mode)
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: testdb
      MYSQL_USER: newrelic
      MYSQL_PASSWORD: nr_password123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./test/fixtures/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - monitoring
    command: 
      - --default-authentication-plugin=mysql_native_password
      - --performance_schema=ON
      - --performance_schema_consumer_events_statements_current=ON
      - --performance_schema_consumer_events_statements_history=ON
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL database (container mode)
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: rootpassword
      POSTGRES_DB: testdb
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./test/fixtures/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - monitoring
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "track_activity_query_size=2048"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RDS Endpoint Simulator (optional)
  # This container simulates RDS endpoints for testing
  rds-simulator:
    image: alpine/socat
    container_name: rds-simulator
    profiles: ["rds-test"]
    networks:
      - monitoring
    command: |
      sh -c "
      echo 'Starting RDS endpoint simulators...'
      # Simulate RDS MySQL endpoint
      socat TCP-LISTEN:13306,fork,reuseaddr TCP:mysql:3306 &
      # Simulate RDS PostgreSQL endpoint
      socat TCP-LISTEN:15432,fork,reuseaddr TCP:postgres:5432 &
      # Keep container running
      tail -f /dev/null
      "
    depends_on:
      - mysql
      - postgres

  # Test runner with AWS CLI and database clients
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: test-runner
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - LOCALSTACK_ENDPOINT=http://localstack:4566
      - NEWRELIC_API_ENDPOINT=http://newrelic-mock:8080
      # Container endpoints
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      # Simulated RDS endpoints (when using rds-test profile)
      - RDS_MYSQL_ENDPOINT=rds-simulator:13306
      - RDS_POSTGRES_ENDPOINT=rds-simulator:15432
    volumes:
      - .:/workspace
      - ~/.aws:/root/.aws:ro
    networks:
      - monitoring
    depends_on:
      - localstack
      - newrelic-mock
      - mysql
      - postgres
    command: tail -f /dev/null

  # Monitoring agent simulator
  # Simulates a New Relic Infrastructure agent for testing
  monitoring-agent:
    image: alpine:latest
    container_name: monitoring-agent
    profiles: ["agent-test"]
    networks:
      - monitoring
    environment:
      # Agent configuration
      - NRIA_LICENSE_KEY=test_license_key
      - NRIA_DISPLAY_NAME=test-monitoring-agent
      # Database endpoints
      - MYSQL_ENDPOINT=mysql:3306
      - POSTGRES_ENDPOINT=postgres:5432
      # For RDS simulation
      - RDS_MYSQL_ENDPOINT=rds-simulator:13306
      - RDS_POSTGRES_ENDPOINT=rds-simulator:15432
    volumes:
      - ./ansible/templates:/etc/newrelic-infra/integrations.d/templates:ro
      - ./config:/etc/newrelic-infra/config:ro
    command: |
      sh -c "
      echo 'Monitoring agent simulator started'
      # Install basic tools
      apk add --no-cache mysql-client postgresql-client curl jq
      # Keep container running
      tail -f /dev/null
      "
    depends_on:
      - mysql
      - postgres

networks:
  monitoring:
    driver: bridge

volumes:
  localstack_data:
  mysql_data:
  postgres_data: